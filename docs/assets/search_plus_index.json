{"/jekyll/2023-03-02-port-list.html": {
    "title": "Server 端口清單",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-03-02-port-list.html",
    "body": "全部程式都用 Nginx 反向代理出去 這樣憑證寫在 Nginx 就好，不會髒到 code Nginx 對外端口 對外端口 代理端口 用途 nginx設定檔 程式路徑 57443 44301 學長舊的專題 old_db.conf /home/IoT/Desktop/Github/theweb 58443                             old_db.conf server { listen 57443 ssl http2; listen [::]:57443 http2 ssl; server_name netlab.isu.edu.tw; location / { proxy_pass http://127.0.0.1:44301; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } ssl_certificate /etc/letsencrypt/live/netlab.isu.edu.tw/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/netlab.isu.edu.tw/privkey.pem; # managed by Certbot }"
  },"/jekyll/2023-03-01-database.html": {
    "title": "資料庫",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-03-01-database.html",
    "body": "架構圖 契作合約 契作農民 農地 契作農地 作物品種 農藥種類 肥料種類 契作合約 契作合約 (struct) │ ├── 序號 (DB) ├── 年度 (int) ├── 期號 (int) │ └── 契作農民 (struct) -&gt; 序號 (DB) 契作農民 契作農民 (struct) │ ├── 序號 (DB) ├── 身分證字號 (string) ├── 姓名 (string) ├── 電話 (string) └── 地址 (string) 農地 農地 (struct) │ ├── 地號 (int) ├── 地段 (string) ├── 地目 (string) │ ├── 所有權人_姓名 (string) ├── 所有權人_身分證字號 (string) │ ├── 本筆面積 (int) ├── 權利面積 (int) ├── 可耕面積 (int) ├── 地段類型 (type) (產銷履歷/新增地段/一般地段) └── 契作中 (Y/N) (可有可無) 契作農地 契作農地 (struct) │ ├── 序號 (DB) ├── 地號 (int) ├── 地段 (string) ├── 作物品種 (struct) -&gt;序號 (DB) │ │ /*----- 契作農地_流程資訊 -----*/ │ ├── 整地_確認 (Y/N) ├── 整地_日期 (string) │ ├── 插秧_確認 (Y/N) ├── 插秧_領苗日期 (string) ├── 插秧_插秧日期 (string) ├── 插秧_秧苗品種 (作物品種) ├── 插秧_秧苗數量 (int) ├── 插秧_秧苗領取人 (string) │ ├── 除草_確認 (Y/N) ├── 除草_日期 (string) ├── 除草_農藥種類 (struct) -&gt;序號 (DB) ├── 除草_用量(公升) (int) │ ├── 曬田_確認 (Y/N) ├── 曬田_日期 (string) │ ├── 穗前肥_確認 (Y/N) ├── 穗前肥_日期 (string) ├── 穗前肥_肥料種類 (struct) -&gt;序號 (DB) ├── 穗前肥_用量(公斤) (int) │ ├── 穗後肥_確認 (Y/N) ├── 穗後肥_日期 (string) ├── 穗後肥_肥料種類 (struct) -&gt;序號 (DB) ├── 穗後肥_用量(公斤) (int) │ ├── 噴藥_確認 (Y/N) ├── 噴藥_日期 (string) ├── 噴藥_農藥種類 (struct) -&gt;序號 (DB) ├── 噴藥_用量(公升) (int) │ ├── 採收_確認 (Y/N) └── 採收_日期 (string) 作物品種 作物品種 (struct) │ ├── 序號 (DB) └── 名稱 (string) 農藥種類 農藥種類 (struct) │ ├── 序號 (DB) └── 名稱 (string) 肥料種類 肥料種類 (struct) │ ├── 序號 (DB) └── 名稱 (string) 帳號 資料庫: old_db 帳號: db-old_db 密碼: netlab!db!old_db 權限範圍: localhost 資料庫: test_db 帳號: db-test_db 密碼: netlab!db!test_db 權限範圍: localhost CREATE DATABASE test_db; CREATE USER 'db-test_db'@'localhost' IDENTIFIED BY 'netlab!db!test_db'; GRANT ALL PRIVILEGES ON test_db.* TO 'db-test_db'@'localhost'; FLUSH PRIVILEGES; QUIT;"
  },"/jekyll/2023-02-16-rocky_linux.html": {
    "title": "RockyLinux",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-02-16-rocky_linux.html",
    "body": "SSH 端口設置 以下是一份開啟SSH連接埠的指令教學。這份教學將引導您完成必要的步驟以開啟SSH連接埠。 # 第一步：編輯 SSH 設定檔 sudo vim /etc/ssh/sshd_config # 第二步：更改 SSH 連接埠 將 \"Port 22\" 改為 \"Port 33000\" （或您想要使用的端口號） # 第三步：設置 SELinux 規則 sudo semanage port -a -t ssh_port_t -p tcp 33000 sudo semanage port -l | grep ssh # 第四步：設置防火牆規則 sudo firewall-cmd --add-port=33000/tcp --permanent sudo firewall-cmd --reload sudo firewall-cmd --list-port # 第五步：重新啟動 SSH 服務 sudo systemctl restart sshd # 第六步：檢查 SSH 服務狀態 sudo systemctl status sshd 遠端桌面(RDP) 以下是一份安裝遠端桌面(RDP)的指令教學，您可以使用這份教學在Linux系統中設置RDP並連接到遠端桌面。 這份教學將引導您進行必要的步驟以設置xRDP，它是一個在Linux中提供RDP服務的軟體套件。 # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：安裝 EPEL 軟體套件庫 sudo dnf install epel-release -y # 第三步：安裝 xRDP sudo dnf install xrdp -y # 第四步：編輯 xRDP 設定檔 sudo vim /etc/xrdp/xrdp.ini # 第五步：更改 xRDP 連接埠 將 \"port=3389\" 改為 \"port=30389\" （或您想要使用的端口號） # 第六步：開啟防火牆的 30389/tcp 連接埠 sudo firewall-cmd --permanent --add-port=30389/tcp # 第七步：重新載入防火牆設定 sudo firewall-cmd --reload # 第八步：確認防火牆的開放連接埠 sudo firewall-cmd --list-ports # 第九步：重新啟動系統 sudo reboot nvm node.js 版本管理 以下是一份使用nvm安裝Node.js的指令教學。這份教學將引導您完成必要的步驟以安裝nvm並透過nvm安裝及管理Node.js版本。 nvm GitHub：https://github.com/nvm-sh/nvm # 第一步：下載並安裝nvm sudo wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash # 第二步：查看所有可用的Node.js版本 nvm list-remote # 第三步：安裝指定版本的Node.js nvm install &lt;node version&gt; # 第四步：使用已安裝的Node.js版本 nvm use &lt;node version&gt; # 第五步：將已安裝的Node.js版本設為預設版本 nvm alias default &lt;node version&gt; # 第六步：檢查Node.js版本 node -v VScode 安裝 以下是在Rocky Linux上安裝Visual Studio Code的指令教學。這份教學將引導您完成必要的步驟以安裝並啟用Visual Studio Code存儲庫， 以及透過dnf安裝Visual Studio Code。請注意，您可以根據您的需求選擇使用不同的Visual Studio Code版本。 # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：匯入Microsoft的GPG金鑰 sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc # 第三步：新增Visual Studio Code存儲庫 printf \"[vscode]\\nname=packages.microsoft.com\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode/\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\\nmetadata_expire=1h\" | sudo tee -a /etc/yum.repos.d/vscode.repo # 第四步：檢查Visual Studio Code存儲庫設定 cat /etc/yum.repos.d/vscode.repo # 第五步：安裝Visual Studio Code (請依照需求選擇其中一個指令) sudo dnf install code -y # 安裝穩定版Visual Studio Code sudo dnf install code-insiders -y # 安裝Insider Preview版Visual Studio Code sudo dnf install code-exploration -y # 安裝Exploration版Visual Studio Code MariaDB 安裝 以下是在Rocky Linux上安裝MariaDB的指令教學。這份教學將引導您完成必要的步驟以安裝MariaDB和啟用MariaDB服務， 以及使用mysql_secure_installation設定MariaDB的安全性和基本配置。 # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：安裝MariaDB及MariaDB伺服器 sudo dnf install mariadb mariadb-server -y # 第三步：啟動MariaDB伺服器 sudo systemctl start mariadb # 第四步：檢查MariaDB伺服器狀態 sudo systemctl status mariadb # 第五步：設定MariaDB伺服器開機啟動 sudo systemctl enable mariadb # 第六步：使用mysql_secure_installation設定MariaDB的安全性和基本配置 sudo mysql_secure_installation # 第七步：檢查MariaDB的版本資訊 mysqladmin -u root -p version DBeaver 安裝 以下是在Rocky Linux上安裝DBeaver的指令教學。這份教學將引導您完成必要的步驟以安裝snap和DBeaver。 # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：安裝snapd sudo dnf install snapd # 第三步：啟用snapd socket sudo systemctl enable --now snapd.socket # 第四步：啟用snapd sudo systemctl enable --now snapd # 第五步：安裝DBeaver sudo snap install dbeaver-ce Nginx 安裝 以下是在Rocky Linux上安裝Nginx的指令教學。這份教學將引導您完成必要的步驟以安裝Nginx並開啟防火牆端口。 # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：安裝Nginx sudo dnf install nginx -y # 第三步：啟動Nginx sudo systemctl start nginx # 第四步：開機啟動Nginx sudo systemctl enable nginx # 第五步：查看Nginx狀態 sudo systemctl status nginx # 第六步：開啟防火牆端口80和443 sudo firewall-cmd --permanent --add-port=80/tcp sudo firewall-cmd --permanent --add-port=443/tcp sudo firewall-cmd --reload sudo firewall-cmd --list-ports 如果您想要在Nginx上使用自定義端口，請參照以下步驟： # 第一步：開啟自定義端口60443 sudo firewall-cmd --permanent --add-port=60443/tcp # 第二步：設定SELinux http端口60443 sudo semanage port -a -t http_port_t -p tcp 60443 sudo semanage port -l | grep http_port_t # 第三步：開啟SELinux的http連線 sudo setsebool -P httpd_can_network_connect 1 Certbot 安裝 Certbot 是一個自動化的工具，可以從 Let’s Encrypt 取得免費的 SSL 憑證，並讓你的網站啟用 HTTPS。 以下是安裝 Certbot 以及通過 Certbot 取得 SSL 憑證的步驟： # 第一步：更新系統套件庫 sudo dnf update -y # 第二步：安裝 Certbot 軟體包 sudo dnf install certbot sudo dnf install python3-certbot-nginx # 第三步：使用 Certbot 取得 SSL 憑證 sudo certbot --nginx -d your_domain_name # 第四步：測試憑證是否正常 sudo certbot renew --dry-run 如果您想要使用 crontab 自動續約憑證，請參照以下步驟： # 第一步：編輯 crontab sudo crontab -e # 添加以下行 0 0,12 * * * certbot renew 以上命令中，0 0,12 * * * 表示每天 0 點和 12 點執行。更多有關 cron 設定的詳細資料，請參閱相關文件。"
  },"/jekyll/2023-01-01-front_end.html": {
    "title": "前端",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-01-01-front_end.html",
    "body": "front end"
  }}
