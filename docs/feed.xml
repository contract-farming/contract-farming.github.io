<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-06T22:43:04+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Home</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>contract-farming</name></author><entry><title type="html">Server 端口清單</title><link href="http://localhost:4000/jekyll/2023-03-02-port-list.html" rel="alternate" type="text/html" title="Server 端口清單" /><published>2023-03-02T00:00:00+08:00</published><updated>2023-03-02T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/port-list</id><content type="html" xml:base="http://localhost:4000/jekyll/2023-03-02-port-list.html"><![CDATA[<p>全部程式都用 Nginx 反向代理出去<br />
這樣憑證寫在 Nginx 就好，不會髒到 code</p>

<p>Nginx 對外端口</p>
<div class="table-wrapper">

  <table>
    <thead>
      <tr>
        <th style="text-align: center">對外端口</th>
        <th style="text-align: center">代理端口</th>
        <th style="text-align: center">用途</th>
        <th style="text-align: center">nginx設定檔</th>
        <th style="text-align: center">程式路徑</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">57443</td>
        <td style="text-align: center">44301</td>
        <td style="text-align: center">學長舊的專題</td>
        <td style="text-align: center">old_db.conf</td>
        <td style="text-align: center">/home/IoT/Desktop/Github/theweb</td>
      </tr>
      <tr>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
      </tr>
      <tr>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
      </tr>
      <tr>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
        <td style="text-align: center"> </td>
      </tr>
    </tbody>
  </table>

</div>]]></content><author><name>hmes98318</name></author><category term="Jekyll" /><summary type="html"><![CDATA[全部程式都用 Nginx 反向代理出去 這樣憑證寫在 Nginx 就好，不會髒到 code]]></summary></entry><entry><title type="html">資料庫帳號</title><link href="http://localhost:4000/jekyll/2023-03-01-database.html" rel="alternate" type="text/html" title="資料庫帳號" /><published>2023-03-01T00:00:00+08:00</published><updated>2023-03-01T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/database</id><content type="html" xml:base="http://localhost:4000/jekyll/2023-03-01-database.html"><![CDATA[<p>資料庫: old_db<br />
帳號: db-old_db<br />
密碼: netlab!db!old_db<br />
權限範圍: localhost</p>

<p>資料庫: test_db<br />
帳號: db-test_db<br />
密碼: netlab!db!test_db<br />
權限範圍: localhost</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE DATABASE test_db;
CREATE USER 'db-test_db'@'localhost' IDENTIFIED BY 'netlab!db!test_db';
GRANT ALL PRIVILEGES ON test_db.* TO 'db-test_db'@'localhost';
FLUSH PRIVILEGES;
QUIT;
</code></pre></div></div>]]></content><author><name>hmes98318</name></author><category term="Jekyll" /><summary type="html"><![CDATA[資料庫: old_db 帳號: db-old_db 密碼: netlab!db!old_db 權限範圍: localhost]]></summary></entry><entry><title type="html">RockyLinux</title><link href="http://localhost:4000/jekyll/2023-02-16-rocky_linux.html" rel="alternate" type="text/html" title="RockyLinux" /><published>2023-02-16T00:00:00+08:00</published><updated>2023-02-16T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/rocky_linux</id><content type="html" xml:base="http://localhost:4000/jekyll/2023-02-16-rocky_linux.html"><![CDATA[<h3 id="ssh-端口設置">SSH 端口設置</h3>
<p>以下是一份開啟SSH連接埠的指令教學。這份教學將引導您完成必要的步驟以開啟SSH連接埠。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：編輯 SSH 設定檔</span>
<span class="nb">sudo </span>vim /etc/ssh/sshd_config

<span class="c"># 第二步：設置 SSH 連接埠</span>
將 <span class="s2">"Port 22"</span> 改為 <span class="s2">"Port 33000"</span> （或您想要使用的端口號）

<span class="c"># 第三步：設置 SELinux 規則</span>
<span class="nb">sudo </span>semanage port <span class="nt">-a</span> <span class="nt">-t</span> ssh_port_t <span class="nt">-p</span> tcp 33000
<span class="nb">sudo </span>semanage port <span class="nt">-l</span> | <span class="nb">grep </span>ssh

<span class="c"># 第四步：設置防火牆規則</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--add-port</span><span class="o">=</span>33000/tcp <span class="nt">--permanent</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--reload</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--list-port</span>

<span class="c"># 第五步：重新啟動 SSH 服務</span>
<span class="nb">sudo </span>systemctl restart sshd

<span class="c"># 第六步：檢查 SSH 服務狀態</span>
<span class="nb">sudo </span>systemctl status sshd
</code></pre></div></div>

<h3 id="遠端桌面rdp">遠端桌面(RDP)</h3>
<p>以下是一份安裝遠端桌面(RDP)的指令教學，您可以使用這份教學在Linux系統中設置RDP並連接到遠端桌面。<br />
這份教學將引導您進行必要的步驟以設置xRDP，它是一個在Linux中提供RDP服務的軟體套件。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：安裝 EPEL 軟體套件庫</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>epel-release <span class="nt">-y</span>

<span class="c"># 第三步：安裝 xRDP</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>xrdp <span class="nt">-y</span>

<span class="c"># 第四步：編輯 xRDP 設定檔</span>
<span class="nb">sudo </span>vim /etc/xrdp/xrdp.ini

<span class="c"># 第五步：開啟防火牆的 3389/tcp 連接埠</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>3389/tcp

<span class="c"># 第六步：重新載入防火牆設定</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--reload</span>

<span class="c"># 第七步：確認防火牆的開放連接埠</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--list-ports</span>

<span class="c"># 第八步：重新啟動系統</span>
reboot
</code></pre></div></div>

<h3 id="nvm-nodejs-版本管理">nvm node.js 版本管理</h3>
<p>以下是一份使用nvm安裝Node.js的指令教學。這份教學將引導您完成必要的步驟以安裝nvm並透過nvm安裝及管理Node.js版本。<br />
nvm GitHub：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：下載並安裝nvm</span>
<span class="nb">sudo </span>wget <span class="nt">-qO-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

<span class="c"># 第二步：查看所有可用的Node.js版本</span>
nvm list-remote

<span class="c"># 第三步：安裝指定版本的Node.js</span>
nvm <span class="nb">install</span> &lt;node version&gt;

<span class="c"># 第四步：使用已安裝的Node.js版本</span>
nvm use &lt;node version&gt;

<span class="c"># 第五步：將已安裝的Node.js版本設為預設版本</span>
nvm <span class="nb">alias </span>default &lt;node version&gt;

<span class="c"># 第六步：檢查Node.js版本</span>
node <span class="nt">-v</span>
</code></pre></div></div>

<h3 id="vscode-安裝">VScode 安裝</h3>
<p>以下是在Rocky Linux上安裝Visual Studio Code的指令教學。這份教學將引導您完成必要的步驟以安裝並啟用Visual Studio Code存儲庫，<br />
以及透過dnf安裝Visual Studio Code。請注意，您可以根據您的需求選擇使用不同的Visual Studio Code版本。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：匯入Microsoft的GPG金鑰</span>
<span class="nb">sudo </span>rpm <span class="nt">--import</span> https://packages.microsoft.com/keys/microsoft.asc

<span class="c"># 第三步：新增Visual Studio Code存儲庫</span>
<span class="nb">printf</span> <span class="s2">"[vscode]</span><span class="se">\n</span><span class="s2">name=packages.microsoft.com</span><span class="se">\n</span><span class="s2">baseurl=https://packages.microsoft.com/yumrepos/vscode/</span><span class="se">\n</span><span class="s2">enabled=1</span><span class="se">\n</span><span class="s2">gpgcheck=1</span><span class="se">\n</span><span class="s2">repo_gpgcheck=1</span><span class="se">\n</span><span class="s2">gpgkey=https://packages.microsoft.com/keys/microsoft.asc</span><span class="se">\n</span><span class="s2">metadata_expire=1h"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/yum.repos.d/vscode.repo

<span class="c"># 第四步：檢查Visual Studio Code存儲庫設定</span>
<span class="nb">cat</span> /etc/yum.repos.d/vscode.repo

<span class="c"># 第五步：安裝Visual Studio Code (請依照需求選擇其中一個指令)</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>code <span class="nt">-y</span>      <span class="c"># 安裝穩定版Visual Studio Code</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>code-insiders <span class="nt">-y</span>   <span class="c"># 安裝Insider Preview版Visual Studio Code</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>code-exploration <span class="nt">-y</span>  <span class="c"># 安裝Exploration版Visual Studio Code</span>
</code></pre></div></div>

<h3 id="mariadb-安裝">MariaDB 安裝</h3>
<p>以下是在Rocky Linux上安裝MariaDB的指令教學。這份教學將引導您完成必要的步驟以安裝MariaDB和啟用MariaDB服務，<br />
以及使用mysql_secure_installation設定MariaDB的安全性和基本配置。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：安裝MariaDB及MariaDB伺服器</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>mariadb mariadb-server <span class="nt">-y</span>

<span class="c"># 第三步：啟動MariaDB伺服器</span>
<span class="nb">sudo </span>systemctl start mariadb

<span class="c"># 第四步：檢查MariaDB伺服器狀態</span>
<span class="nb">sudo </span>systemctl status mariadb

<span class="c"># 第五步：設定MariaDB伺服器開機啟動</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>mariadb

<span class="c"># 第六步：使用mysql_secure_installation設定MariaDB的安全性和基本配置</span>
<span class="nb">sudo </span>mysql_secure_installation

<span class="c"># 第七步：檢查MariaDB的版本資訊</span>
mysqladmin <span class="nt">-u</span> root <span class="nt">-p</span> version
</code></pre></div></div>

<h3 id="dbeaver-安裝">DBeaver 安裝</h3>
<p>以下是在Rocky Linux上安裝DBeaver的指令教學。這份教學將引導您完成必要的步驟以安裝snap和DBeaver。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：安裝snapd</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>snapd

<span class="c"># 第三步：啟用snapd socket</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable</span> <span class="nt">--now</span> snapd.socket

<span class="c"># 第四步：啟用snapd</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable</span> <span class="nt">--now</span> snapd

<span class="c"># 第五步：安裝DBeaver</span>
<span class="nb">sudo </span>snap <span class="nb">install </span>dbeaver-ce
</code></pre></div></div>

<h3 id="nginx-安裝">Nginx 安裝</h3>
<p>以下是在Rocky Linux上安裝Nginx的指令教學。這份教學將引導您完成必要的步驟以安裝Nginx並開啟防火牆端口。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：安裝Nginx</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>nginx <span class="nt">-y</span>

<span class="c"># 第三步：啟動Nginx</span>
<span class="nb">sudo </span>systemctl start nginx

<span class="c"># 第四步：開機啟動Nginx</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>nginx

<span class="c"># 第五步：查看Nginx狀態</span>
<span class="nb">sudo </span>systemctl status nginx

<span class="c"># 第六步：開啟防火牆端口80和443</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>80/tcp
<span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>443/tcp
<span class="nb">sudo </span>firewall-cmd <span class="nt">--reload</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--list-ports</span>
</code></pre></div></div>

<h5 id="如果您想要在nginx上使用自定義端口請參照以下步驟">如果您想要在Nginx上使用自定義端口，請參照以下步驟：</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：開啟自定義端口60443</span>
<span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>60443/tcp

<span class="c"># 第二步：設定SELinux http端口60443</span>
<span class="nb">sudo </span>semanage port <span class="nt">-a</span> <span class="nt">-t</span> http_port_t <span class="nt">-p</span> tcp 60443
<span class="nb">sudo </span>semanage port <span class="nt">-l</span> | <span class="nb">grep </span>http_port_t

<span class="c"># 第三步：開啟SELinux的http連線</span>
<span class="nb">sudo </span>setsebool <span class="nt">-P</span> httpd_can_network_connect 1
</code></pre></div></div>

<h3 id="certbot-安裝">Certbot 安裝</h3>
<p>Certbot 是一個自動化的工具，可以從 Let’s Encrypt 取得免費的 SSL 憑證，並讓你的網站啟用 HTTPS。<br />
以下是安裝 Certbot 以及通過 Certbot 取得 SSL 憑證的步驟：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：更新系統套件庫</span>
<span class="nb">sudo </span>dnf update <span class="nt">-y</span>

<span class="c"># 第二步：安裝 Certbot 軟體包</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>certbot
<span class="nb">sudo </span>dnf <span class="nb">install </span>python3-certbot-nginx

<span class="c"># 第三步：使用 Certbot 取得 SSL 憑證</span>
<span class="nb">sudo </span>certbot <span class="nt">--nginx</span> <span class="nt">-d</span> your_domain_name

<span class="c"># 第四步：測試憑證是否正常</span>
<span class="nb">sudo </span>certbot renew <span class="nt">--dry-run</span>
</code></pre></div></div>

<h5 id="如果您想要使用-crontab-自動續約憑證請參照以下步驟">如果您想要使用 crontab 自動續約憑證，請參照以下步驟：</h5>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一步：編輯 crontab</span>
<span class="nb">sudo </span>crontab <span class="nt">-e</span>

<span class="c"># 添加以下行</span>
0 0,12 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> certbot renew
</code></pre></div></div>
<p>以上命令中，0 0,12 * * * 表示每天 0 點和 12 點執行。更多有關 cron 設定的詳細資料，請參閱相關文件。</p>]]></content><author><name>hmes98318</name></author><category term="Jekyll" /><summary type="html"><![CDATA[SSH 端口設置 以下是一份開啟SSH連接埠的指令教學。這份教學將引導您完成必要的步驟以開啟SSH連接埠。 ```bash 第一步：編輯 SSH 設定檔 sudo vim /etc/ssh/sshd_config]]></summary></entry><entry><title type="html">前端</title><link href="http://localhost:4000/jekyll/2023-01-01-front_end.html" rel="alternate" type="text/html" title="前端" /><published>2023-01-01T00:00:00+08:00</published><updated>2023-01-01T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/front_end</id><content type="html" xml:base="http://localhost:4000/jekyll/2023-01-01-front_end.html"><![CDATA[<p>front end</p>]]></content><author><name>front end</name></author><category term="Jekyll" /><summary type="html"><![CDATA[front end]]></summary></entry></feed>